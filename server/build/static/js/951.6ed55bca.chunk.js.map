{"version":3,"file":"static/js/951.6ed55bca.chunk.js","mappings":"kMAAaA,EAAiB,SAACC,GAAK,iBAAWA,EAAMC,KAAI,E,2BCY1C,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,IAAYN,GAAhCO,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAElB,GAA8BC,EAAAA,EAAAA,UAAS,IAAG,eAAnCC,EAAO,KAAEC,EAAU,MAE1BC,EAAAA,EAAAA,YAAU,WAGR,OAFAR,GAASS,EAAAA,EAAAA,OAEF,WACLT,GAASU,EAAAA,EAAAA,MACX,CACF,GAAG,CAACV,IAeJ,OACE,iBAAKW,UAAU,OAAM,WACnB,iBAAKA,UAAU,gBAAe,WAC5B,4BACE,oCACA,gBAAKC,GAAG,QAAO,UACb,wBACGR,EAAMS,KAAI,SAACC,GAAC,OACX,wBAAaA,GAAJA,EAAW,YAM5B,gBAAKH,UAAU,SAAQ,UACrB,mBAAQI,QAnBE,WAChBf,GAASgB,EAAAA,EAAAA,KACX,EAiBmC,4BAI/B,iBAAKL,UAAU,aAAY,WACzB,eAAIA,UAAU,iBAAgB,SAC3BR,EAASU,KAAI,SAACI,GAAE,OACf,gBAAuBN,UAAU,UAAS,WACxC,iBAAKA,UAAU,iBAAgB,WAC7B,wBAAKM,EAAGC,QACR,2BAAOC,EAAAA,EAAAA,GAAOF,EAAGG,UAAW,gBAE9B,gBAAKT,UAAU,gBAAe,UAC5B,uBAAIM,EAAGI,WANFJ,EAAGG,UAQP,OAIT,iBAAKT,UAAU,eAAc,WAC3B,kBAAMC,GAAG,eAAeU,SAhDf,SAACC,GAChBA,EAAEC,iBAEElB,EAAQmB,SACVzB,GAAS0B,EAAAA,EAAAA,IAAkB,CAAEpB,QAASA,EAAQmB,UAC9ClB,EAAW,IAEf,EAyCmD,WACzC,kBACEoB,KAAK,OACLC,KAAK,UACLC,YAAY,UACZC,WAAS,EACTC,aAAa,MACbC,MAAO1B,EACP2B,SAAU,SAACV,GAAC,OAAKhB,EAAWgB,EAAEW,OAAOF,MAAM,KAE7C,yCAEF,mBAAQpB,GAAG,gBAAe,mCAKpC,C","sources":["views/Chat/slice/selector.js","views/Chat/index.js"],"sourcesContent":["export const selectMessages = (state) => ({ ...state.chat })\n","import React, { useEffect, useState } from 'react'\nimport './style.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  closeSocketAction,\n  initSocketAction,\n  sendMessageAction,\n} from './slice/action'\nimport { selectMessages } from './slice/selector'\nimport { format } from 'date-fns'\nimport { logOutAction } from 'redux/action'\n\nexport default function Chat() {\n  const dispatch = useDispatch()\n  const { messages, users } = useSelector(selectMessages)\n\n  const [message, setMessage] = useState('')\n\n  useEffect(() => {\n    dispatch(initSocketAction())\n\n    return () => {\n      dispatch(closeSocketAction())\n    }\n  }, [dispatch])\n\n  const hdSubmit = (e) => {\n    e.preventDefault()\n\n    if (message.trim()) {\n      dispatch(sendMessageAction({ message: message.trim() }))\n      setMessage('')\n    }\n  }\n\n  const hdSignOut = () => {\n    dispatch(logOutAction())\n  }\n\n  return (\n    <div className='chat'>\n      <div className='chat__sidebar'>\n        <div>\n          <h3>People</h3>\n          <div id='users'>\n            <ol>\n              {users.map((u) => (\n                <li key={u}>{u}</li>\n              ))}\n            </ol>\n          </div>\n        </div>\n\n        <div className='bottom'>\n          <button onClick={hdSignOut}>Sign Out</button>\n        </div>\n      </div>\n\n      <div className='chat__main'>\n        <ol className='chat__messages'>\n          {messages.map((ms) => (\n            <li key={ms.createdAt} className='message'>\n              <div className='message__title'>\n                <h4>{ms.from}</h4>\n                <span>{format(ms.createdAt, 'H:mm a')}</span>\n              </div>\n              <div className='message__body'>\n                <p>{ms.text}</p>\n              </div>\n            </li>\n          ))}\n        </ol>\n\n        <div className='chat__footer'>\n          <form id='message-form' onSubmit={hdSubmit}>\n            <input\n              type='text'\n              name='message'\n              placeholder='Message'\n              autoFocus\n              autoComplete='off'\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n            />\n            <button>Send</button>\n          </form>\n          <button id='send-location'>Send location</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":["selectMessages","state","chat","Chat","dispatch","useDispatch","useSelector","messages","users","useState","message","setMessage","useEffect","initSocketAction","closeSocketAction","className","id","map","u","onClick","logOutAction","ms","from","format","createdAt","text","onSubmit","e","preventDefault","trim","sendMessageAction","type","name","placeholder","autoFocus","autoComplete","value","onChange","target"],"sourceRoot":""}